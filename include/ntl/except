/**
 * @file except
 * @author jungkwang.lee (ntoskrnl7@google.com)
 * @brief
 *
 * @copyright Copyright (c) 2022 NT Template Library Authoers.
 *
 */
#pragma once

#include "status"

#include <ntstatus.h>
#include <string>

namespace ntl {
class exception : public std::exception {
public:
  explicit exception(NTSTATUS status, const std::string &message)
      : status_(status), message_(message) {}
  explicit exception(status status, const std::string &message)
      : status_(status), message_(message) {}

  const status &get_status() const { return status_; }

private:
  status status_;
  std::string message_;
};

namespace seh {
template <class Fn, class... Args>
inline std::tuple<bool, unsigned long> try_except(Fn &&f, Args &&... args) {
  auto code = [&]() -> unsigned long {
    __try {
      f(std::forward<Args>(args)...);
    } __except (EXCEPTION_EXECUTE_HANDLER) {
      return GetExceptionCode();
    }
    return 0;
  }();
  if (code)
    return {false, code};
  return {true, 0};
}
} // namespace seh
} // namespace ntl