/**
 * @file expand_stack
 * @author jungkwang.lee (ntoskrnl7@google.com)
 * @brief KeExpandKernelStackAndCalloutEx Helper features.
 *
 * @copyright Copyright (c) 2022 NT Template Library Authoers.
 *
 */
#pragma once

#if _MSC_VER < 1911
#error Visual Studio 20017 15.3 or later is required.
#endif

// clang-format off
#if defined(_WDM_INCLUDED_)
#ifdef _X86_
#define KERNEL_LARGE_STACK_SIZE 61440
#endif
#ifdef _AMD64_
#define KERNEL_LARGE_STACK_SIZE 0x12000
#endif
#ifdef _ARM_
#define KERNEL_LARGE_STACK_SIZE   0xF000
#endif
#ifdef _ARM64_
#define KERNEL_LARGE_STACK_SIZE   0x12000
#endif
#define MAXIMUM_EXPANSION_SIZE (KERNEL_LARGE_STACK_SIZE - (PAGE_SIZE / 2))
EXTERN_C_START
typedef
_IRQL_requires_same_
_Function_class_(EXPAND_STACK_CALLOUT)
VOID
(NTAPI EXPAND_STACK_CALLOUT) (
    _In_opt_ PVOID Parameter
    );

typedef EXPAND_STACK_CALLOUT *PEXPAND_STACK_CALLOUT;

#if (NTDDI_VERSION >= NTDDI_VISTA)
_Must_inspect_result_
_IRQL_requires_min_(PASSIVE_LEVEL)
_IRQL_requires_max_(DISPATCH_LEVEL)
__drv_reportError("DISPATCH_LEVEL is only supported on Windows 7 or later.")
NTKERNELAPI
NTSTATUS
KeExpandKernelStackAndCalloutEx (
    _In_ PEXPAND_STACK_CALLOUT Callout,
    _In_opt_ PVOID Parameter,
    _In_ SIZE_T Size,
    _In_ BOOLEAN Wait,
    _In_opt_ PVOID Context
    );
EXTERN_C_END
#endif
#else
#include <ntddk.h>
#endif
// clang-format on

#include "except"
#include <memory>
#include <stdexcept>
#include <tuple>
#include <type_traits>

namespace ntl {
#pragma warning(push)

#ifndef NTL_INVOKE_RESULT
#if _MSVC_LANG >= 201703L
#define NTL_INVOKE_RESULT(F, Args) std::invoke_result_t<F, Args>
#elif _MSVC_LANG >= 201402L
#define NTL_INVOKE_RESULT(F, Args) std::result_of_t<F(Args)>
#else
#define NTL_INVOKE_RESULT(F, Args) std::result_of<F(Args)>::type
#endif
#endif // NTL_INVOKE_RESULT

#ifndef NTL_APPLY
#if _MSVC_LANG >= 201703L
#define NTL_APPLY std::apply
#else
namespace detail {
template <class F, class Tuple, std::size_t... I>
constexpr decltype(auto) apply_impl(F &&f, Tuple &&t,
                                    std::index_sequence<I...>) {
  // This implementation is valid since C++20 (via P1065R2)
  // In C++17, a constexpr counterpart of std::invoke is actually needed here
  return std::invoke(std::forward<F>(f),
                     std::get<I>(std::forward<Tuple>(t))...);
}
} // namespace detail

template <class F, class Tuple>
constexpr decltype(auto) apply(F &&f, Tuple &&t) {
  return detail::apply_impl(
      std::forward<F>(f), std::forward<Tuple>(t),
      std::make_index_sequence<
          std::tuple_size_v<std::remove_reference_t<Tuple>>>{});
}
#define NTL_APPLY ntl::apply
#endif // _MSVC_LANG >= 201703L
#endif // NTL_APPLY

#if _MSVC_LANG < 201703L
// warning disable c4984 'if constexpr' is a c++17 language extension
#pragma warning(disable : 4984)
#endif // _MSVC_LANG >= 201703L

namespace detail {
namespace expand_stack {
inline ntl::exception make_exception(NTSTATUS status) {
  const char *message;
  switch (status) {
  case STATUS_INVALID_PARAMETER_3:
    message =
        "The stack_size parameter is greater than MAXIMUM_EXPANSION_SIZE.";
    break;
  case STATUS_INVALID_PARAMETER_4:
    message = "The routine was called at IRQL = DISPATCH_LEVEL.";
    break;
  case STATUS_NO_MEMORY:
    message = "Not enough memory is available to expand the stack.";
    break;
  case STATUS_STACK_OVERFLOW:
    message = "The stack, if expanded, would exceed the operating "
              "system's internal limits on stack space.";
    break;
  default:
    message = "Unknown error.";
    break;
  }
  return std::move(ntl::exception(status, message));
}
} // namespace expand_stack
} // namespace detail

static const size_t expand_stack_size_max = MAXIMUM_EXPANSION_SIZE;

struct expand_stack_options {
  expand_stack_options()
      : stack_size_(expand_stack_size_max), wait_(true),
        ignore_failure_(false) {}
  expand_stack_options(size_t stack_size)
      : stack_size_(stack_size), wait_(true), ignore_failure_(false) {
    validate();
  }
  expand_stack_options(size_t stack_size, bool wait)
      : stack_size_(stack_size), wait_(wait), ignore_failure_(false) {
    validate();
  }
  expand_stack_options(size_t stack_size, bool wait, bool ignore_failure)
      : stack_size_(stack_size), wait_(wait), ignore_failure_(ignore_failure) {
    validate();
  }

  expand_stack_options &stack_size(size_t stack_size) {
    stack_size_ = stack_size;
    validate();
    return *this;
  }
  expand_stack_options &wait(bool wait) {
    wait_ = wait;
    return *this;
  }
  expand_stack_options &ignore_failure(bool ignore_failure) {
    ignore_failure_ = ignore_failure;
    return *this;
  }

  void validate() const {
    if (stack_size_ > expand_stack_size_max)
      throw std::invalid_argument(
          "The stack_size parameter is greater than MAXIMUM_EXPANSION_SIZE.");
  }
  size_t stack_size_;
  bool wait_;
  bool ignore_failure_;
};

template <class Fn, class... Args>
inline NTL_INVOKE_RESULT(Fn, Args...)
    expand_stack(expand_stack_options &&opts, Fn &&f, Args &&... args) {
  struct context_t {
    context_t(Fn &&f, Args &&... args)
        : f(f), args(std::make_tuple(std::forward<Args>(args)...)) {}
    Fn &f;
    std::tuple<Args...> args;
  };
  context_t ctx(std::forward<Fn &&>(f), std::forward<Args>(args)...);

  using return_type = NTL_INVOKE_RESULT(Fn, Args...);
  if constexpr (std::is_void_v<return_type>) {
    NTSTATUS status = KeExpandKernelStackAndCalloutEx(
        [](void *ptr) {
          auto &ctx = *(context_t *)ptr;
          NTL_APPLY(ctx.f, std::forward<decltype(ctx.args)>(ctx.args));
        },
        &ctx, opts.stack_size_, opts.wait_, NULL);
    if (NT_SUCCESS(status))
      return;
    if (opts.ignore_failure_)
      NTL_APPLY(ctx.f, std::move(ctx.args));
    throw detail::expand_stack::make_exception(status);
  } else {
    std::tuple<context_t *, std::unique_ptr<return_type>> context_with_ret =
        std::make_tuple(&ctx, nullptr);
    NTSTATUS status = KeExpandKernelStackAndCalloutEx(
        [](void *ptr) {
          auto context_with_ret =
              (std::tuple<context_t *, std::unique_ptr<return_type>> *)ptr;
          auto &ctx = *std::get<0>(*context_with_ret);
          std::get<1>(*context_with_ret) =
              std::make_unique<return_type>(std::move(NTL_APPLY(
                  ctx.f, std::forward<decltype(ctx.args)>(ctx.args))));
        },
        &context_with_ret, opts.stack_size_, opts.wait_, NULL);
    if (NT_SUCCESS(status))
      return std::move(*std::get<1>(context_with_ret));
    if (opts.ignore_failure_)
      return NTL_APPLY(ctx.f, std::forward<decltype(ctx.args)>(ctx.args));
    throw detail::expand_stack::make_exception(status);
  }
}

template <class Fn, class... Args>
inline NTL_INVOKE_RESULT(Fn, Args...) expand_stack(Fn &&f, Args &&... args) {
  return expand_stack<Fn, Args...>(expand_stack_options{}, std::forward<Fn>(f),
                                   std::forward<Args>(args)...);
}
#pragma warning(pop)
} // namespace ntl